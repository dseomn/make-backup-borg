#!/bin/sh

log() { printf %s\\n "$*"; }
verbose() { test "$VERBOSE" -ge 1 && log "$*"; }
error() { log "ERROR: $*" >&2; }
fatal() { error "$*"; exit 1; }
try() { "$@" || fatal "Command failed: $*"; }
try_v() { verbose "Running command: $*"; try "$@"; }

BASE_DIR="$(try dirname "$0")" || exit 1


# Parse configuration.
CONFIG_FILE="${BASE_DIR}/make-backup.conf"
LOCAL_CONFIG_FILE="${BASE_DIR}/make-backup.local.conf"

. "$CONFIG_FILE" || fatal "Unable to read config file: ${CONFIG_FILE}"
. "$LOCAL_CONFIG_FILE" ||
  fatal "Unable to read local config file: ${LOCAL_CONFIG_FILE}"

config_fatal() {
  fatal "$* [CONFIG_FILE=${CONFIG_FILE} LOCAL_CONFIG_FILE=${LOCAL_CONFIG_FILE}]"
}

get_archive_command() {
  test -n "$1" || fatal "get_archive_command: No archive name given."
  for command_path in \
      "$BASE_DIR/commands.local/$1" \
      "$BASE_DIR/commands/$1" \
      ; do
    if test -e "$command_path"; then
      printf %s "$command_path"
      return
    fi
  done
  fatal "Command '$1' not found in" \
    "$BASE_DIR/commands.local/ or $BASE_DIR/commands/"
}

get_exclude_from_file() {
  test -n "$1" || fatal "get_exclude_from_file: No file given."
  if test -e "$1"; then
    printf %s "$1"
  else
    # These are optional, so use /dev/null as the default of excluding nothing.
    printf %s /dev/null
  fi
}

test -n "$BORG" || config_fatal "BORG command is not set"

test -n "$BORG_REPO" || config_fatal "BORG_REPO is not set"
export BORG_REPO  # Used by borg itself.

test -n "$ARCHIVE_NAME" || config_fatal "ARCHIVE_NAME is not set"

test -n "$PATHS" || config_fatal "No configured PATHS to backup"

for command_name in $COMMANDS; do
  # Make sure the command exists.
  get_archive_command "$command_name" > /dev/null
done


# Capture COMMANDS output, or exit if another make-backup is running.
mkdir -m 700 "${BASE_DIR}/command-output/" || {
  error "Unable to create directory ${BASE_DIR}/command-output/."
  error
  error "If another ${0} is already running, wait for it to finish. Otherwise,"
  error "consider deleting the directory."
  exit 1
}
trap 'exit 1' HUP INT TERM
trap 'try rm -r "${BASE_DIR}/command-output/"' EXIT

for command_name in $COMMANDS; do
  command="$(get_archive_command "$command_name")" || exit 1
  verbose "Saving output of ${command} to ${BASE_DIR}/command-output/"
  try "$command" > "${BASE_DIR}/command-output/${command_name}" ||
    fatal "Unable to write to ${BASE_DIR}/command-output/${command_name}"
done


# Make the archive.
exclude_from="$(get_exclude_from_file "${BASE_DIR}/files.exclude")" || exit 1
exclude_from_local="$(
    get_exclude_from_file "${BASE_DIR}/files.local.exclude")" ||
  exit 1
try_v $BORG create \
  $(test "$VERBOSE" -ge 1 && printf '%s' --progress) \
  --exclude-from "$exclude_from" \
  --exclude-from "$exclude_from_local" \
  "::${ARCHIVE_NAME}" $PATHS
